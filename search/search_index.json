{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b K33422 \u0414\u0435\u043c\u0448\u0438 \u0415\u0432\u0433\u0435\u043d\u0438\u0438</p>"},{"location":"lab2/forms/","title":"\u0424\u043e\u0440\u043c\u044b","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0444\u043e\u0440\u043c\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b <code>forms.py</code> \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u041e\u0442\u0437\u044b\u0432 <pre><code>from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n# Create your forms here.\nclass NewUserForm(UserCreationForm):\nemail = forms.EmailField(required=True)\nclass Meta:\nmodel = User\nfields = (\"username\", \"email\", \"password1\", \"password2\")\ndef save(self, commit=True):\nuser = super(NewUserForm, self).save(commit=False)\nif commit:\nuser.save()\nreturn user\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 <code>UserCreationForm</code>. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043b\u0435 \u043f\u043e\u0447\u0442\u044b.</p> <pre><code>from django import forms\nfrom .models import Booking\nclass BookRoomForm(forms.ModelForm):\nclass Meta:\nmodel = Booking\nfields = (\"date_start\", \"date_end\")\ndef __init__(self, *args, **kwargs):\nself.user = kwargs.pop('user', None)\nself.room = kwargs.pop('room', None)\nsuper(BookRoomForm, self).__init__(*args, **kwargs)\ndate_start = forms.DateField(widget=forms.TextInput(attrs={'type': 'date'}))\ndate_end = forms.DateField(widget=forms.TextInput(attrs={'type': 'date'}))\ndef save(self, commit=True):\nbooking = super(BookRoomForm, self).save(commit=False)\nbooking.user = self.user\nbooking.room = self.room\nif commit:\nbooking.save()\nreturn booking\n</code></pre> <p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412\u043c\u0435\u0441\u0442\u0435 \u0441 \u0440\u0435\u043a\u0432\u0435\u0441\u0442\u043e\u043c \u0432 \u043d\u0435\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0438 \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0435,  \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u0431\u0440\u043e\u043d\u0438\u0440\u0443\u0435\u0442. \u042e\u0437\u0435\u0440\u0443 \u043d\u0443\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0430\u0442\u0435 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f.</p> <pre><code>from django import forms\nfrom .models import Comment\nclass ReviewForm(forms.ModelForm):\nclass Meta:\nmodel = Comment\nfields = (\"rating\", \"content\")\ndef __init__(self, *args, **kwargs):\nself.user = kwargs.pop('user', None)\nself.room = kwargs.pop('room', None)\nsuper(ReviewForm, self).__init__(*args, **kwargs)\ndef save(self, commit=True):\ncomment = super(ReviewForm, self).save(commit=False)\ncomment.user = self.user\ncomment.room = self.room\ncomment.date = datetime.date.today()\nif commit:\ncomment.save()\nreturn comment\n</code></pre> <p>\u0421\u0430\u043c\u0430\u044f \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u043e\u0440\u043c\u0430, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u041d\u0430\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e 2 \u043f\u043e\u043b\u044f: \u0442\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433.</p>"},{"location":"lab2/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0411\u0414 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0439\u0434\u0451\u043c \u0432 \u0444\u0430\u0439\u043b <code>models.py</code> \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438  \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0445 \u043e\u0442 <code>django.db.models.Model</code>.</p> \u041e\u0442\u0435\u043b\u044c\u041a\u043e\u043c\u043d\u0430\u0442\u0430\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u041e\u0442\u0437\u044b\u0432 <pre><code>from django.db import models\nclass Hotel(models.Model):\nname = models.CharField(max_length=50)\nowner = models.CharField(max_length=50, null=True, blank=True)\ncountry = models.CharField(max_length=30)\ncity = models.CharField(max_length=30)\naddress = models.CharField(max_length=100)\ndescription = models.CharField(max_length=1000, null=True, blank=True)\nimage = models.ImageField()\ndef __str__(self):\nreturn f'{self.city}'\n</code></pre> <pre><code>from django.db import models\nclass Room(models.Model):\nTYPE_ROOM = (\n(\"PREMIUM\", \"premium\"),\n(\"DELUXE\", \"deluxe\"),\n(\"SUITE\", \"suite\"),\n)\nhotel = models.ForeignKey(Hotel, on_delete=models.CASCADE)\ndescription = models.CharField(max_length=1000)\ntype = models.CharField(max_length=10, choices=TYPE_ROOM)\ncost = models.IntegerField()\nimage = models.ImageField()\nguest = models.ManyToManyField(User, through='Booking')\ndef __str__(self):\nreturn self.type\n</code></pre> <pre><code>from django.contrib.auth.models import User\nfrom django.db import models\nclass Booking(models.Model):\nuser = models.ForeignKey(User, on_delete=models.CASCADE)\nroom = models.ForeignKey(Room, on_delete=models.CASCADE)\ndate_start = models.DateField()\ndate_end = models.DateField()\n</code></pre> <pre><code>from django.contrib.auth.models import User\nfrom django.db import models\nclass Comment(models.Model):\nuser = models.ForeignKey(User, on_delete=models.CASCADE)\nroom = models.ForeignKey(Room, on_delete=models.CASCADE)\ncontent = models.CharField(max_length=1000, null=True, blank=True)\nrating = models.IntegerField()\ndate = models.DateField()\ndef __str__(self):\nreturn f'{self.user} \u043en {self.room}'\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>\u0410 \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> <pre><code>python manage.py createsuperuser\n</code></pre>"},{"location":"lab2/views/","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":"<p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 <code>views.py</code> \u043f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0432\u0445\u043e\u0434 \u0438 \u0432\u044b\u0445\u043e\u0434\u0421\u043f\u0438\u0441\u043a\u043e\u0432\u044b\u0435 \u0438 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u041e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 <pre><code>from django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom .forms import NewUserForm\ndef register_request(request):\nif request.method == \"POST\":\nform = NewUserForm(request.POST)\nif form.is_valid():\nuser = form.save()\nlogin(request, user)\nmessages.success(request, \"Registration successful.\" )\nreturn redirect(\"/\")\nmessages.error(request, \"Unsuccessful registration. Invalid information.\")\nform = NewUserForm()\nreturn render(request=request, template_name=\"register.html\", context={\"register_form\": form})\ndef login_request(request):\nif request.method == \"POST\":\nform = AuthenticationForm(request, data=request.POST)\nif form.is_valid():\nusername = form.cleaned_data.get('username')\npassword = form.cleaned_data.get('password')\nuser = authenticate(username=username, password=password)\nif user is not None:\nlogin(request, user)\nmessages.info(request, f\"You are now logged in as {username}.\")\nreturn redirect(\"/\")\nelse:\nmessages.error(request,\"Invalid username or password.\")\nelse:\nmessages.error(request,\"Invalid username or password.\")\nform = AuthenticationForm()\nreturn render(request=request, template_name=\"login.html\", context={\"login_form\": form})\ndef logout_request(request):\nlogout(request)\nmessages.info(request, \"You have successfully logged out.\")\nreturn redirect(\"/\")\n</code></pre> <pre><code>from django.shortcuts import render, redirect\nfrom hotel_app.models import Hotel, Room\nfrom django.views.generic.list import ListView\nfrom django.views.generic.detail import DetailView\nclass BookingListView(ListView):\nmodel = Booking\nqueryset = model.objects.all()\ndef get_queryset(self):\ntry:\nqueryset = self.queryset.filter(user=self.request.user)\nexcept ValueError:\nqueryset = self.model.objects.none()\nreturn queryset\nclass HotelRetrieveView(DetailView):\nmodel = Hotel\nclass HotelListView(ListView):\nmodel = Hotel\nclass RoomListView(ListView):\nmodel = Room\nqueryset = model.objects.all()\ndef get_queryset(self):\nhotel = self.kwargs['hotel_city']\nif hotel:\ntry:\nqueryset = self.queryset.filter(hotel__city=hotel)\nexcept ValueError:\nqueryset = self.model.objects.none()\nreturn queryset\nreturn self.queryset\n</code></pre> <pre><code>from django.shortcuts import render, redirect\nfrom hotel_app.models import Room, Booking\nfrom .forms import BookRoomForm\ndef booking_view(request, *args, **kwargs):\nmodel = Room\nqueryset = model.objects.all()\nhotel = kwargs['hotel_city']\nqueryset = queryset.filter(hotel__city=hotel)\nroom_type = kwargs['room_type']\nroom = queryset.get(type=room_type)\ncomm_model = Comment\ncomm_queryset = comm_model.objects.all()\ncomments = comm_queryset.filter(room=room)\nprint(room)\nif request.POST:\nform = BookRoomForm(request.POST, user=request.user, room=room)\nif form.is_valid():\nbooking = form.save()\nreturn redirect(\"/booking/\")\nform = BookRoomForm()\nreturn render(request=request, template_name=\"room_detail.html\", context={\"booking_form\": form,\n\"comments\": comments})\n</code></pre> <pre><code>from django.shortcuts import render, redirect\nfrom hotel_app.models import Room, Comment\nfrom .forms import ReviewForm\ndef leave_review(request, *args, **kwargs):\nmodel = Room\nqueryset = model.objects.all()\nhotel = kwargs['hotel_city']\nqueryset = queryset.filter(hotel__city=hotel)\nroom_type = kwargs['room_type']\nroom = queryset.get(type=room_type)\nif request.POST:\nform = ReviewForm(request.POST, user=request.user, room=room)\nif form.is_valid():\ncomment = form.save()\nreturn redirect(\"/booking/\")\nform = ReviewForm()\nreturn render(request=request, template_name=\"review.html\", context={\"review_form\": form})\n</code></pre>"},{"location":"lab3/auth/","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c.</p> <pre><code> pip install -U djoser\n</code></pre> http://127.0.0.1:8000/auth/users/http://127.0.0.1:8000/auth/token/login\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 <p></p> <p></p> <p></p>"},{"location":"lab3/description/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f.</p> <p></p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p></p>"},{"location":"lab3/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0411\u0414 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0439\u0434\u0451\u043c \u0432 \u0444\u0430\u0439\u043b <code>models.py</code> \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438  \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0445 \u043e\u0442 <code>django.db.models.Model</code>.</p> \u041c\u0443\u0437\u0435\u0439 \u0438 \u0410\u0432\u0442\u043e\u0440\u041f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u041a\u0430\u0440\u0442\u043e\u0442\u0435\u043a\u0430\u0424\u043e\u043d\u0434 \u0438 \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430\u041f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0432 \u0424\u043e\u043d\u0434 \u0438 \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0430 \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0443 <pre><code>from django.contrib.auth.models import User\nclass Museum(models.Model):\nname = models.CharField(max_length=100)\ndirector = models.ForeignKey(User, on_delete=models.CASCADE)\ndef __str__(self):\nreturn self.name\nclass Author(models.Model):\nname = models.CharField(max_length=100)\nbirth_date = models.DateField(null=True, blank=True)\ncountry = models.CharField(max_length=30)\ndef __str__(self):\nreturn self.name\n</code></pre> <pre><code>class Card(models.Model):\nname = models.CharField(max_length=150)\ninventory_number = models.IntegerField()\nauthor = models.ForeignKey(Author, on_delete=models.CASCADE, null=True, blank=True, related_name='work')\nimage = models.ImageField(null=True, blank=True)\ncountry = models.CharField(max_length=30, null=True, blank=True)\ncreation_year = models.IntegerField()\nis_year_exact = models.BooleanField(default=False)\ndescription = models.CharField(max_length=1000, null=True, blank=True)\ndef __str__(self):\nreturn self.name\nclass Item(models.Model):\nname = models.CharField(max_length=150)\ncard = models.ForeignKey(Card, on_delete=models.CASCADE, related_name='item')\nnumber = models.IntegerField()\ndescription = models.CharField(max_length=1000, null=True, blank=True)\nimage = models.ImageField(null=True, blank=True)\ndef __str__(self):\nreturn self.name\n</code></pre> <pre><code>class Foundation(models.Model):\nname = models.CharField(max_length=50)\naddress = models.CharField(max_length=100)\nmuseum = models.ForeignKey(Museum, on_delete=models.CASCADE, related_name='foundation')\ncurator = models.ForeignKey(User, on_delete=models.CASCADE)\ncard = models.ManyToManyField(Card, through='CardToFoundation', related_name='foundation')\ndef __str__(self):\nreturn self.name\nclass Exhibition(models.Model):\nname = models.CharField(max_length=50)\nmuseum = models.ForeignKey(Museum, on_delete=models.CASCADE, related_name='exhibition')\ndescription = models.CharField(max_length=1000)\naddress = models.CharField(max_length=100)\ncontact_name = models.CharField(max_length=50)\ncontact_phone = models.CharField(max_length=12)\nopen_date = models.DateField()\nclose_date = models.DateField()\nitem = models.ManyToManyField(Item, through='ItemToExhibition', related_name='exhibition')\ndef __str__(self):\nreturn self.name\n</code></pre> <pre><code>class ItemToExhibition(models.Model):\nitem = models.ForeignKey(Item, on_delete=models.CASCADE, related_name='sending_to_exhibition')\nexhibition = models.ForeignKey(Exhibition, on_delete=models.CASCADE, related_name='item_sending')\nsend_date = models.DateField()\nreturn_date = models.DateField()\ndirector_signature = models.BooleanField(default=False)\ndef __str__(self):\nreturn f'{self.item} \u043en {self.exhibition}'\nclass CardToFoundation(models.Model):\ncard = models.ForeignKey(Card, on_delete=models.CASCADE, related_name='sending_to_foundation')\nfoundation = models.ForeignKey(Foundation, on_delete=models.CASCADE, related_name='card_sending')\nstart_date = models.DateField()\nend_date = models.DateField(null=True, blank=True)\ndirector_signature = models.BooleanField(default=False)\ncurator_signature = models.BooleanField(default=False)\ndef __str__(self):\nreturn f'{self.card} in {self.foundation}'\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>\u0410 \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> <pre><code>python manage.py createsuperuser\n</code></pre>"},{"location":"lab3/serializers/","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b","text":"<p>\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u043c\u043e\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b.</p> \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u044f <pre><code>from .models import *\nclass MuseumSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Museum\nfields = '__all__'\nclass AuthorSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Author\nfields = '__all__'\nclass CardSerializer(serializers.ModelSerializer):\nauthor = AuthorSerializer()\nclass Meta:\nmodel = Card\nfields = '__all__'\nclass ItemSerializer(serializers.ModelSerializer):\ncard = CardSerializer()\nclass Meta:\nmodel = Item\nfields = '__all__'\nclass FoundationSerializer(serializers.ModelSerializer):\nmuseum = MuseumSerializer()\ncard = CardSerializer(many=True)\nclass Meta:\nmodel = Foundation\nfields = '__all__'\nclass ExhibitionSerializer(serializers.ModelSerializer):\nmuseum = MuseumSerializer()\nitem = ItemSerializer(many=True)\nclass Meta:\nmodel = Exhibition\nfields = '__all__'\nclass ItemToExhibitionSerializer(serializers.ModelSerializer):\nitem = ItemSerializer()\nexhibition = ExhibitionSerializer()\nclass Meta:\nmodel = ItemToExhibition\nfields = '__all__'\nclass CardToFoundationSerializer(serializers.ModelSerializer):\ncard = CardSerializer()\nfoundation = FoundationSerializer()\nclass Meta:\nmodel = CardToFoundation\nfields = '__all__'\n</code></pre> <pre><code>from rest_framework import serializers\nfrom .models import *\nclass ItemCreateSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Item\nfields = '__all__'\nclass CardCreateSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Card\nfields = '__all__'\nclass ItemToExhibitionCreateSerializer(serializers.ModelSerializer):\nitem = ItemSerializer()\nexhibition = ExhibitionSerializer()\nclass Meta:\nmodel = ItemToExhibition\nfields = ['id', 'item', 'exhibition', 'send_date', 'return_date']\nclass CardToFoundationCreateSerializer(serializers.ModelSerializer):\ncard = CardSerializer()\nfoundation = FoundationSerializer()\nclass Meta:\nmodel = CardToFoundation\nfields = ['id', 'set', 'foundation', 'send_date', 'return_date']\n</code></pre> <pre><code>from rest_framework import serializers\nfrom .models import *\nclass FoundationExhibitionSerializer(serializers.ModelSerializer):\nnum_exhibitions = serializers.IntegerField()\nclass Meta:\nmodel = Foundation\nfields = ['id', 'name', 'num_exhibitions']\nclass CardItemSerializer(serializers.ModelSerializer):\nnum_items = serializers.IntegerField()\nclass Meta:\nmodel = Foundation\nfields = ['id', 'name', 'num_items']\nclass FoundationRatioSerializer(serializers.ModelSerializer):\npercentage = serializers.IntegerField()\nclass Meta:\nmodel = Foundation\nfields = ['id', 'name', 'percentage']\nclass ItemCommonExhibitionsSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel = Item\nfields = ['id', 'name', 'exhibition']\n</code></pre>"},{"location":"lab3/task3-1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430","text":"<p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 Django ORM.</p> \u041c\u043e\u0434\u0435\u043b\u0438\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 <pre><code>from django.db import models\nclass CarOwner(models.Model):\nlast_name = models.CharField(max_length=30)\nfirst_name = models.CharField(max_length=30)\nbirth_date = models.DateField()\ndef __str__(self):\nreturn f'{self.first_name} {self.last_name}'\nclass License(models.Model):\nLICENSE_TYPE = (\n('B', 'passenger car'),\n('C', 'truck'),\n('D', 'bus'),\n)\ncar_owner = models.ForeignKey(CarOwner, on_delete=models.CASCADE)\nlicense_number = models.IntegerField()\ntype = models.CharField(max_length=2, choices=LICENSE_TYPE)\ndate_of_issue = models.DateField()\nclass Car(models.Model):\nlicense_plate_number = models.CharField(max_length=15)\nbrand = models.CharField(max_length=20)\nmodel = models.CharField(max_length=20)\ncolor = models.CharField(max_length=30)\nowner = models.ManyToManyField(CarOwner, through='Ownership')\ndef __str__(self):\nreturn self.license_plate_number\nclass Ownership(models.Model):\nuser = models.ForeignKey(CarOwner, on_delete=models.CASCADE)\ncar = models.ForeignKey(Car, on_delete=models.CASCADE)\ndate_start = models.DateField()\ndate_end = models.DateField(null=True, blank=True)\nended = models.BooleanField()\n</code></pre> <pre><code>from django.utils import datetime\nfrom project_first_app.models import CarOwner, Car, Ownership, Licence\nowners = CarOwner.objects.bulk_create(\n[\nCarOwner(last_name=\"\u0411\u0435\u043b\u044f\u0435\u0432 \", first_name=\"\u0413\u043b\u0435\u0431 \", birth_date=datetime.now()),\nCarOwner(last_name=\"\u041f\u043e\u043d\u043e\u043c\u0430\u0440\u0435\u0432\", first_name=\"\u0415\u0433\u043e\u0440\", birth_date=datetime.now()),\nCarOwner(last_name=\"\u0421\u0438\u0434\u043e\u0440\u043e\u0432\u0430\", first_name=\"\u041c\u0430\u0440\u044c\u044f\u043d\u0430\", birth_date=datetime.now()),\nCarOwner(last_name=\"\u0413\u043e\u0440\u0434\u0435\u0435\u0432\u0430\", first_name=\"\u041a\u0441\u0435\u043d\u0438\u044f\", birth_date=datetime.now()),\nCarOwner(last_name=\"\u0421\u0438\u043d\u0438\u0446\u044b\u043d\u0430\", first_name=\"\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430\", birth_date=datetime.now()),\nCarOwner(last_name=\"\u0410\u0431\u0440\u0430\u043c\u043e\u0432\", first_name=\"\u0424\u0451\u0434\u043e\u0440\", birth_date=datetime.now()),\n]\n)\ncars = Car.objects.bulk_create(\n[\nCar(license_plate_number=\" \u0425574\u0422\u041c\", brand=\"Jeep\", model=\"Compass\", color=\"\u0447\u0435\u0440\u043d\u044b\u0439\"),\nCar(license_plate_number=\"\u0423342\u0423\u0420\", brand=\"Honda\", model=\"Clarity\", color=\"\u0441\u0438\u043d\u0438\u0439\"),\nCar(license_plate_number=\"\u0421699\u041d\u041e\", brand=\"Ford\", model=\"Fusion\", color=\"\u0431\u0435\u043b\u044b\u0439\"),\nCar(license_plate_number=\"\u0423253\u041a\u041c\", brand=\"Kia\", model=\"Rio\", color=\"\u0441\u0435\u0440\u044b\u0439\"),\nCar(license_plate_number=\"\u0422191\u0412\u0425\", brand=\"Volkswagen\", model=\"Atlas\", color=\"\u0447\u0435\u0440\u043d\u044b\u0439\"),\nCar(license_plate_number=\"E543MK\", brand=\"Ford\", model=\"Maverick\", color=\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\"),\n]\n)\nownerships = Ownership.objects.bulk_create(\n[Ownership(owner=owners[i], car=cars[i], start_date=datetime.now()) for i in range(6)]\n)\nlicences = DrivingLicence.objects.bulk_create(\n[Licence(owner=owners[i], number=str(i + 1) * 10, type=\"B\", issue_date=datetime.now()) for i in range(6)]\n)\n</code></pre> <pre><code>from django.utils import datetime\nfrom project_first_app.models import CarOwner, Car, Licence\ntoyota_cars = Car.objects.filter(brand=\"Ford\").all()\nivan_owners = CarOwner.objects.filter(first_name=\"\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430\").all()\nrandom_owner_id = CarOwner.objects.order_by(\"?\").values_list(\"id\", flat=True).first()\nrandom_owner_licence = DrivingLicence.objects.get(owner_id=random_owner_id)\nblack_car_owners = CarOwner.objects.filter(ownerships__car__color=\"\u0447\u0435\u0440\u043d\u044b\u0439\").all()\nthis_year_owners = CarOwner.objects.filter(licences__issue_date__year=datetime.now().year).all()\n</code></pre> <pre><code>from django.db.models import Min, Max, Count\nfrom project_first_app.models import CarOwner, Car, Ownership, Licence\noldest_licence = Licence.objects.aggregate(max_issue_date=Min(\"issue_date\"))[\"max_issue_date\"]\nnewest_ownership = Ownership.objects.aggregate(max_start_date=Max(\"start_date\"))[\"max_start_date\"]\nownerships_counts = CarOwner.objects.annotate(count=Count(\"ownerships\"))\nownerships_counts_str = [f\"{owner.full_name}: {owner.count}\" for owner in ownerships_counts]\ncars_count_by_brands = Car.objects.values(\"brand\").annotate(count=Count(\"id\"))\ncars_count_by_brands_str = [f\"{car['brand']}: {car['count']}\" for car in cars_count_by_brands]\nsorted_owners = CarOwner.objects.order_by(\"ownerships__start_date\").all()\n</code></pre>"},{"location":"lab3/urls/","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 urls.py \u0432 \u043e\u0434\u043d\u043e\u0438\u043c\u0435\u043d\u043d\u043e\u0439 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 museum \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0443\u0442\u0438 \u043a  \u0430\u0434\u043c\u0438\u043d\u043a\u0435, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u0438 swagger-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a \u0435\u0433\u043e api. \u0412 \u0444\u0430\u0439\u043b\u0435 urls.py \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f  \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0443\u0442\u0438 \u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> museum/urls.pymuseum_app/urls.py <pre><code>from django.db import models\nfrom django.urls import path, include, re_path\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\nschema_view = get_schema_view(\nopenapi.Info(\ntitle=\"API\",\ndefault_version='v2',\ndescription=\"Description\",\nterms_of_service=\"https://www.google.com/policies/terms/\",\ncontact=openapi.Contact(email=\"hardbeat34@gmail.com\"),\nlicense=openapi.License(name=\"BSD License\"),\n),\npublic=True,\npermission_classes=[permissions.AllowAny,],\n)\nurlpatterns = [\npath(\"admin/\", admin.site.urls),\npath('api-auth/', include('rest_framework.urls')),\npath(\"api/\", include(\"museum_app.urls\")),\npath('auth/', include('djoser.urls')),\nre_path(r'auth/', include('djoser.urls.authtoken')),\npath('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\npath('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc')\n]\n</code></pre> <p>admin/ - \u0430\u0434\u043c\u0438\u043d\u043a\u0430  api-auth/ - \u043f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c url \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438  api/ - \u043f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c url \u043a \u043b\u044e\u0431\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 museum_app  auth/ - \u043f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c url \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 djoser  doc/swagger/ - \u043f\u0443\u0442\u044c \u043a swagger \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438  doc/redoc - \u043f\u0443\u0442\u044c \u043a swagger \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 </p> <pre><code>from .views import *\nurlpatterns = [\npath('foundations/list', FoundationListView.as_view()),\npath('card/list', CardListView.as_view()),\npath('card/create/', CardCreateAPIView.as_view()),\npath('item/list', ItemListView.as_view()),\npath('item/create/', ItemCreateAPIView.as_view()),\npath('foundations/exhibitions/', FoundationExhibitionCountView.as_view()),\npath('card/items/', CardItemCountView.as_view()),\npath('foundations/ratio/', FoundationRatioView.as_view()),\npath('item/exhibitions/&lt;int:pk&gt;', ItemCommonExhibitionsView.as_view()),\n]\n</code></pre> <p>foundations/list - \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u043e\u043d\u0434\u043e\u0432  card/list - \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0440\u0442\u043e\u0442\u0435\u043a  card/create/ - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0442\u0435\u043a\u0443  item/list - \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432  item/create/ - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043c\u0435\u0442  foundations/exhibitions/ - \u0443\u0437\u043d\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u043e\u043d\u0434\u0430  card/items/ - \u0443\u0437\u043d\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0442\u0435\u043a\u0435  foundations/ratio/ - \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0444\u043e\u043d\u0434\u043e\u0432  item/exhibitions/ - \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0441 \u043d\u0438\u043c \u0432 \u043e\u0434\u043d\u0438\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430\u0445"},{"location":"lab3/views/","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 Generic \u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p> \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430, \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 <pre><code>from rest_framework import generics\nfrom .serializers import *\nfrom .models import *\nfrom django.db.models import Count, F\nclass FoundationExhibitionCountView(generics.ListAPIView):\nqueryset = Foundation.objects.annotate(num_exhibitions=Count('card__item__exhibition', distinct=True))\nserializer_class = FoundationExhibitionSerializer\nclass CardItemCountView(generics.ListAPIView):\nqueryset = Card.objects.annotate(num_items=Count('item', distinct=True))\nserializer_class = CardItemSerializer\nclass FoundationRatioView(generics.ListAPIView):\ntotal_cards = Card.objects.count()\nqueryset = Foundation.objects.annotate(num_cards=Count('card')).annotate(\npercentage=F('num_cards') * 100 / total_cards)\nserializer_class = FoundationRatioSerializer\nclass ItemCommonExhibitionsView(generics.ListAPIView):\nserializer_class = ItemCommonExhibitionsSerializer\ndef get_queryset(self):\nitem_id = self.kwargs['pk']\nspecified_item = Item.objects.get(id=item_id)\nqueryset = Item.objects.filter(exhibition__in=specified_item.exhibition.all()).exclude(id=specified_item.id).distinct()\nreturn queryset\n</code></pre> <pre><code>from rest_framework import generics\nfrom .serializers import *\nfrom .models import *\nclass FoundationListView(generics.ListAPIView):\nqueryset = Foundation.objects.all()\nserializer_class = FoundationSerializer\nclass CardListView(generics.ListAPIView):\nqueryset = Card.objects.all()\nserializer_class = CardSerializer\nclass CardDetailView(generics.RetrieveUpdateDestroyAPIView):\nqueryset = Card.objects.all()\nserializer_class = CardSerializer\nclass CardCreateAPIView(generics.CreateAPIView):\nqueryset = Card.objects.all()\nserializer_class = CardCreateSerializer\nclass ItemListView(generics.ListAPIView):\nqueryset = Item.objects.all()\nserializer_class = ItemSerializer\nclass ItemDetailView(generics.RetrieveUpdateDestroyAPIView):\nqueryset = Item.objects.all()\nserializer_class = ItemSerializer\nclass ItemCreateAPIView(generics.CreateAPIView):\nqueryset = Item.objects.all()\nserializer_class = ItemCreateSerializer\nclass ExhibitionListView(generics.ListAPIView):\nqueryset = Exhibition.objects.all()\nserializer_class = ExhibitionSerializer\nclass ExhibitionDetailView(generics.RetrieveUpdateDestroyAPIView):\nqueryset = Exhibition.objects.all()\nserializer_class = FoundationSerializer\nclass CardToFoundationListView(generics.ListAPIView):\nqueryset = CardToFoundation.objects.all()\nserializer_class = CardToFoundationSerializer\nclass ItemToExhibitionListView(generics.ListAPIView):\nqueryset = ItemToExhibition.objects.all()\nserializer_class = ItemToExhibitionSerializer\nclass CardToFoundationCreateAPIView(generics.CreateAPIView):\nqueryset = CardToFoundation.objects.all()\nserializer_class = CardToFoundationCreateSerializer\nclass ItemToExhibitionCreateAPIView(generics.CreateAPIView):\nqueryset = ItemToExhibition.objects.all()\nserializer_class = ItemToExhibitionCreateSerializer\n</code></pre>"}]}